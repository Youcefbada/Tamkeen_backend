# تقرير شامل عن مشروع Tamkeen

## مقدمة
مشروع **Tamkeen** هو نظام برمجي يعتمد على تقنيات الويب لإدارة العلاقات بين المستخدمين، المدربين، مراكز التدريب، الشركات، التدريبات، والبرامج التدريبية. يهدف المشروع إلى تسهيل عمليات التسجيل، تسجيل الدخول، إدارة البيانات، وتقديم طلبات التدريب أو التدريب الداخلي. يعتمد النظام على خادم **Express.js**، قاعدة بيانات **MySQL**، ويتضمن ميزات مثل التحقق من الهوية باستخدام **JWT**، تحميل الملفات باستخدام **Multer**، وتشفير كلمات المرور باستخدام **bcrypt**.

يتضمن المشروع مجموعة من النقاط النهائية (Endpoints) التي تتيح التفاعل مع النظام عبر واجهة برمجة التطبيقات (API). في هذا التقرير، سيتم شرح كل نقطة نهائية، الغرض منها، والبيانات المطلوبة من الخلفية (Backend) باللغة العربية.

---

## نظرة عامة على النظام
- **الغرض**: إدارة بيانات المستخدمين، المدربين، مراكز التدريب، الشركات، التدريبات الداخلية، البرامج التدريبية، الطلبات، والإشعارات.
- **التقنيات**:
  - **Express.js**: لإنشاء الخادم وإدارة الطلبات.
  - **MySQL**: لتخزين البيانات.
  - **JWT**: للتحقق من هوية المستخدم.
  - **Multer**: لتحميل الملفات.
  - **bcrypt**: لتشفير كلمات المرور.
  - **dotenv**: لإدارة المتغيرات البيئية.
- **الميزات**:
  - تسجيل الدخول باستخدام البريد الإلكتروني أو الهاتف.
  - تسجيل مستخدمين جدد (مستخدمين عاديين، مدربين، مراكز تدريب، شركات).
  - إدارة الملفات (مثل السيرة الذاتية، الشهادات، الشعارات).
  - إنشاء وإدارة التدريبات الداخلية والبرامج التدريبية.
  - تقديم طلبات التدريب أو التدريب الداخلي.
  - إدارة الإشعارات والاهتمامات.

---

## شرح النقاط النهائية (Endpoints)

### 1. **تسجيل الدخول**
#### **POST /loginEmail**
- **الغرض**: السماح للمستخدم بتسجيل الدخول باستخدام البريد الإلكتروني وكلمة المرور.
- **البيانات المطلوبة**:
  - `email` (البريد الإلكتروني): نص (مثال: `user@example.com`).
  - `password` (كلمة المرور): نص.
- **الاستجابة**:
  - ناجحة: رمز JWT ومعلومات المستخدم (الاسم، البريد الإلكتروني).
  - فشل: خطأ (مثل "المستخدم غير موجود" أو "بيانات الاعتماد غير صالحة").
- **ملاحظات**: يتحقق من البريد الإلكتروني في جدول `users` ويقارن كلمة المرور المشفرة باستخدام `bcrypt`.

#### **POST /loginPhone**
- **الغرض**: السماح للمستخدم بتسجيل الدخول باستخدام رقم الهاتف وكلمة المرور.
- **البيانات المطلوبة**:
  - `phone` (رقم الهاتف): نص (مثال: `+213123456789`).
  - `password` (كلمة المرور): نص.
- **الاستجابة**:
  - ناجحة: رمز JWT ومعلومات المستخدم (الاسم، رقم الهاتف).
  - فشل: خطأ (مثل "المستخدم غير موجود" أو "بيانات الاعتماد غير صالحة").
- **ملاحظات**: مشابه لـ `/loginEmail` ولكنه يستخدم رقم الهاتف بدلاً من البريد.

#### **POST /logout**
- **الغرض**: تسجيل خروج المستخدم عن طريق إضافة رمز JWT إلى القائمة السوداء.
- **البيانات المطلوبة**:
  - رأس `Authorization`: يحتوي على رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم تسجيل الخروج بنجاح".
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يتطلب التحقق من الرمز باستخدام `verifyToken`. يتم تخزين الرمز في جدول `tokens` مع نوع `blacklisted`.

---

### 2. **تسجيل المستخدمين**
#### **POST /signuptrainers**
- **الغرض**: تسجيل مدرب جديد مع تحميل ملفات (السيرة الذاتية، الشهادات، صورة الملف الشخصي).
- **البيانات المطلوبة**:
  - `first_name` (الاسم الأول): نص.
  - `last_name` (الاسم الأخير): نص.
  - `email` (البريد الإلكتروني): نص.
  - `date_of_birth` (تاريخ الميلاد): تاريخ.
  - `gender` (الجنس): نص.
  - `wilaya` (الولاية): نص.
  - `Commune` (البلدية): نص.
  - `Street` (الشارع): نص.
  - `education_level` (مستوى التعليم): نص.
  - `interests` (الاهتمامات): نص.
  - `other_skill` (مهارات أخرى): نص (اختياري).
  - `phone` (رقم الهاتف): نص.
  - `specialty` (التخصص): نص.
  - `password` (كلمة المرور): نص.
  - ملفات:
    - `cv` (السيرة الذاتية): ملف.
    - `certificated` (الشهادات): ملف.
    - `profile_picture` (صورة الملف الشخصي): ملف.
- **الاستجابة**:
  - ناجحة: رسالة "تم تسجيل المدرب بنجاح".
  - فشل: خطأ (مثل "البريد الإلكتروني موجود مسبقًا" أو "جميع الحقول مطلوبة").
- **ملاحظات**: يتحقق من عدم وجود البريد الإلكتروني مسبقًا في جدول `trainers`. يتم تشفير كلمة المرور باستخدام `bcrypt`.

#### **POST /signupcenter**
- **الغرض**: تسجيل مركز تدريب جديد مع تحميل شعار.
- **البيانات المطلوبة**:
  - `name` (اسم المركز): نص.
  - `email` (البريد الإلكتروني): نص.
  - `password` (كلمة المرور): نص.
  - `phone` (رقم الهاتف): نص.
  - `address` (العنوان): نص.
  - `numero_commerce` (رقم السجل التجاري): نص.
  - `type` (نوع المركز): نص.
  - `wilaya` (الولاية): نص.
  - `Commune` (البلدية): نص.
  - `speciality` (التخصص): نص.
  - `website` (الموقع الإلكتروني): نص.
  - `facebook`, `instagram`, `x`, `linkedin` (روابط التواصل الاجتماعي): نص (اختياري).
  - ملف:
    - `logo` (الشعار): ملف.
- **الاستجابة**:
  - ناجحة: رسالة "تم تسجيل مركز التدريب بنجاح".
  - فشل: خطأ (مثل "البريد الإلكتروني موجود مسبقًا").
- **ملاحظات**: يتم تخزين البيانات في جدول `training_centers`.

#### **POST /signupcompanies**
- **الغرض**: تسجيل شركة جديدة مع تحميل شعار.
- **البيانات المطلوبة**:
  - `name` (اسم الشركة): نص.
  - `email` (البريد الإلكتروني): نص.
  - `password` (كلمة المرور): نص.
  - `phone` (رقم الهاتف): نص.
  - `domain` (المجال): نص.
  - `size` (حجم الشركة): نص.
  - `website` (الموقع الإلكتروني): نص.
  - `wilaya` (الولاية): نص.
  - `Commune` (البلدية): نص.
  - `numero_commerce` (رقم السجل التجاري): نص.
  - `address` (العنوان): نص.
  - `location` (الموقع): نص.
  - ملف:
    - `logo` (الشعار): ملف.
- **الاستجابة**:
  - ناجحة: رسالة "تم تسجيل الشركة بنجاح".
  - فشل: خطأ (مثل "البريد الإلكتروني موجود مسبقًا").
- **ملاحظات**: يتم تخزين البيانات في جدول `companies`.

#### **POST /signupuser**
- **الغرض**: تسجيل مستخدم عادي جديد مع تحميل صورة الملف الشخصي.
- **البيانات المطلوبة**:
  - `first_name` (الاسم الأول): نص.
  - `last_name` (الاسم الأخير): نص.
  - `email` (البريد الإلكتروني): نص.
  - `password` (كلمة المرور): نص.
  - `phone` (رقم الهاتف): نص.
  - `address` (العنوان): نص.
  - `user_type` (نوع المستخدم): نص.
  - `receive_notifications` (استلام الإشعارات): نص (`true` أو `false`).
  - `notification_type` (نوع الإشعارات): نص (اختياري).
  - ملف:
    - `profile_picture` (صورة الملف الشخصي): ملف.
- **الاستجابة**:
  - ناجحة: رسالة "تم تسجيل المستخدم بنجاح".
  - فشل: خطأ (مثل "البريد الإلكتروني موجود مسبقًا").
- **ملاحظات**: يتم تخزين البيانات في جدول `users`.

---

### 3. **إدارة المستخدمين**
#### **GET /users/:id**
- **الغرض**: استرجاع تفاصيل مستخدم محدد.
- **البيانات المطلوبة**:
  - `:id` (معرف المستخدم): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: بيانات المستخدم (مثل الاسم، البريد، الهاتف).
  - فشل: خطأ (مثل "المستخدم غير موجود").
- **ملاحظات**: يتطلب التحقق من الرمز.

#### **PUT /users/:id**
- **الغرض**: تحديث بيانات مستخدم محدد.
- **البيانات المطلوبة**:
  - `:id` (معرف المستخدم): رقم.
  - رأس `Authorization`: رمز JWT.
  - `first_name`, `last_name`, `email`, `phone`, `address`, `user_type`: نصوص (مطلوبة).
  - `password`, `receive_notifications`, `notification_type`: نصوص (اختيارية).
  - ملف:
    - `profile_picture` (صورة الملف الشخصي): ملف (اختياري).
- **الاستجابة**:
  - ناجحة: رسالة "تم تحديث المستخدم بنجاح".
  - فشل: خطأ (مثل "البريد الإلكتروني موجود مسبقًا").
- **ملاحظات**: يتحقق من عدم استخدام البريد من قبل مستخدم آخر.

#### **DELETE /users/:id**
- **الغرض**: حذف مستخدم محدد.
- **البيانات المطلوبة**:
  - `:id` (معرف المستخدم): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم حذف المستخدم بنجاح".
  - فشل: خطأ (مثل "المستخدم غير موجود").
- **ملاحظات**: يتحقق من وجود المستخدم قبل الحذف.

#### **GET /users/:id/interests**
- **الغرض**: استرجاع الاهتمامات المرتبطة بمستخدم محدد.
- **البيانات المطلوبة**:
  - `:id` (معرف المستخدم): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة الاهتمامات (معرف، اسم).
  - فشل: خطأ (مثل "لا توجد اهتمامات").
- **ملاحظات**: يستخدم جدول `user_interests` للربط.

#### **POST /users/:id/interests**
- **الغرض**: إضافة اهتمام جديد لمستخدم.
- **البيانات المطلوبة**:
  - `:id` (معرف المستخدم): رقم.
  - `interest_id` (معرف الاهتمام): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم إضافة الاهتمام بنجاح".
  - فشل: خطأ (مثل "الاهتمام موجود مسبقًا").
- **ملاحظات**: يتحقق من وجود المستخدم والاهتمام.

#### **DELETE /users/:id/interests/:interestId**
- **الغرض**: حذف اهتمام من مستخدم.
- **البيانات المطلوبة**:
  - `:id` (معرف المستخدم): رقم.
  - `:interestId` (معرف الاهتمام): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم إزالة الاهتمام بنجاح".
  - فشل: خطأ (مثل "الاهتمام غير موجود").
- **ملاحظات**: يتحقق من وجود الربط بين المستخدم والاهتمام.

#### **GET /users/:id/internship_applications**
- **الغرض**: استرجاع طلبات التدريب الداخلي لمستخدم.
- **البيانات المطلوبة**:
  - `:id` (معرف المستخدم): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة الطلبات.
  - فشل: خطأ (مثل "المستخدم غير موجود").
- **ملاحظات**: يسترجع البيانات من جدول `internship_applications`.

#### **GET /users/:id/program_applications**
- **الغرض**: استرجاع طلبات البرامج التدريبية لمستخدم.
- **البيانات المطلوبة**:
  - `:id` (معرف المستخدم): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة الطلبات.
  - فشل: خطأ (مثل "المستخدم غير موجود").
- **ملاحظات**: يسترجع البيانات من جدول `program_applications`.

#### **GET /users/:id/notifications**
- **الغرض**: استرجاع الإشعارات لمستخدم.
- **البيانات المطلوبة**:
  - `:id` (معرف المستخدم): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة الإشعارات.
  - فشل: خطأ (مثل "المستخدم غير موجود").
- **ملاحظات**: يمكن تقييد الوصول للمستخدم أو المسؤول.

---

### 4. **إدارة الشركات**
#### **GET /companies**
- **الغرض**: استرجاع قائمة جميع الشركات.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة الشركات.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يسترجع البيانات من جدول `companies`.

#### **GET /companies/:id**
- **الغرض**: استرجاع تفاصيل شركة محددة.
- **البيانات المطلوبة**:
  - `:id` (معرف الشركة): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: بيانات الشركة.
  - فشل: خطأ (مثل "الشركة غير موجودة").
- **ملاحظات**: يتحقق من وجود الشركة.

#### **PUT /companies/:id**
- **الغرض**: تحديث بيانات شركة.
- **البيانات المطلوبة**:
  - `:id` (معرف الشركة): رقم.
  - `name`, `email`, `domain`, `size`, `website`, `wilaya`, `Commune`, `numero_commerce`, `phone`, `address`: نصوص (مطلوبة).
  - `password`: نص (اختياري).
  - ملف:
    - `logo` (الشعار): ملف (اختياري).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم تحديث الشركة بنجاح".
  - فشل: خطأ (مثل "البريد الإلكتروني موجود مسبقًا").
- **ملاحظات**: يحتفظ بالشعار وكلمة المرور القديمة إذا لم يتم تقديم جديد.

#### **DELETE /companies/:id**
- **الغرض**: حذف شركة.
- **البيانات المطلوبة**:
  - `:id` (معرف الشركة): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم حذف الشركة بنجاح".
  - فشل: خطأ (مثل "الشركة غير موجودة").
- **ملاحظات**: يتحقق من وجود الشركة.

#### **GET /get_companies_name**
- **الغرض**: استرجاع أسماء جميع الشركات.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة بأسماء الشركات.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يستخدم لعرض قائمة مختصرة.

#### **GET /companies/:id/internships**
- **الغرض**: استرجاع التدريبات الداخلية لشركة.
- **البيانات المطلوبة**:
  - `:id` (معرف الشركة): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة التدريبات.
  - فشل: خطأ (مثل "الشركة غير موجودة").
- **ملاحظات**: يسترجع البيانات من جدول `internships`.

---

### 5. **إدارة مراكز التدريب**
#### **GET /training_centers**
- **الغرض**: استرجاع قائمة مراكز التدريب.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة المراكز.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يسترجع البيانات من جدول `training_centers`.

#### **GET /training_centers/:id**
- **الغرض**: استرجاع تفاصيل مركز تدريب.
- **البيانات المطلوبة**:
  - `:id` (معرف المركز): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: بيانات المركز.
  - فشل: خطأ (مثل "المركز غير موجود").
- **ملاحظات**: يتحقق من وجود المركز.

#### **PUT /training_centers/:id**
- **الغرض**: تحديث بيانات مركز تدريب.
- **البيانات المطلوبة**:
  - `:id` (معرف المركز): رقم.
  - `name`, `email`, `phone`, `numero_commerce`, `type`, `wilaya`, `Commune`, `speciality`, `website`, `address`: نصوص (مطلوبة).
  - `password`, `facebook`, `instagram`, `X`, `linkedin`: نصوص (اختيارية).
  - ملف:
    - `logo` (الشعار): ملف (اختياري).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم تحديث المركز بنجاح".
  - فشل: خطأ (مثل "البريد الإلكتروني موجود مسبقًا").
- **ملاحظات**: يحتفظ بالشعار وكلمة المرور القديمة إذا لم يتم تقديم جديد.

#### **DELETE /training_centers/:id**
- **الغرض**: حذف مركز تدريب.
- **البيانات المطلوبة**:
  - `:id` (معرف المركز): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم حذف المركز بنجاح".
  - فشل: خطأ (مثل "المركز غير موجود").
- **ملاحظات**: يتحقق من وجود المركز.

#### **GET /get_training_centers_name**
- **الغرض**: استرجاع أسماء مراكز التدريب.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة بأسماء المراكز.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يستخدم لعرض قائمة مختصرة.

#### **GET /training_centers/:id/programs**
- **الغرض**: استرجاع البرامج التدريبية لمركز.
- **البيانات المطلوبة**:
  - `:id` (معرف المركز): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة البرامج.
  - فشل: خطأ (مثل "المركز غير موجود").
- **ملاحظات**: يسترجع البيانات من جدول `training_programs`.

---

### 6. **إدارة المدربين**
#### **GET /trainers**
- **الغرض**: استرجاع قائمة المدربين.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة المدربين.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يسترجع البيانات من جدول `trainers`.

#### **GET /trainers/:id**
- **الغرض**: استرجاع تفاصيل مدرب.
- **البيانات المطلوبة**:
  - `:id` (معرف المدرب): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: بيانات المدرب.
  - فشل: خطأ (مثل "المدرب غير موجود").
- **ملاحظات**: يتحقق من وجود المدرب.

#### **PUT /trainers/:id**
- **الغرض**: تحديث بيانات مدرب.
- **البيانات المطلوبة**:
  - `:id` (معرف المدرب): رقم.
  - `first_name`, `last_name`, `email`, `date_of_birth`, `gender`, `wilaya`, `Commune`, `Street`, `education_level`, `interests`, `phone`, `specialty`: نصوص (مطلوبة).
  - `password`, `other_skill`: نصوص (اختيارية).
  - ملفات:
    - `profile_picture`, `cv`, `certificated`: ملفات (اختيارية).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم تحديث المدرب بنجاح".
  - فشل: خطأ (مثل "البريد الإلكتروني موجود مسبقًا").
- **ملاحظات**: يحتفظ بالملفات القديمة إذا لم يتم تقديم جديد.

#### **DELETE /trainers/:id**
- **الغرض**: حذف مدرب.
- **البيانات المطلوبة**:
  - `:id` (معرف المدرب): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم حذف المدرب بنجاح".
  - فشل: خطأ (مثل "المدرب غير موجود").
- **ملاحظات**: يتحقق من وجود المدرب.

---

### 7. **إدارة التدريبات الداخلية**
#### **GET /internships**
- **الغرض**: استرجاع قائمة التدريبات الداخلية.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة التدريبات.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يسترجع البيانات من جدول `internships`.

#### **GET /internships/:id**
- **الغرض**: استرجاع تفاصيل تدريب داخلي.
- **البيانات المطلوبة**:
  - `:id` (معرف التدريب): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: بيانات التدريب.
  - فشل: خطأ (مثل "التدريب غير موجود").
- **ملاحظات**: يتحقق من وجود التدريب.

#### **POST /internships**
- **الغرض**: إنشاء تدريب داخلي جديد.
- **البيانات المطلوبة**:
  - `company_id` (معرف الشركة): رقم.
  - `title`, `description`, `type`, `mode`, `duration`, `location`, `start_date`, `end_date`: نصوص (مطلوبة).
  - `category_id`: رقم (مطلوب).
  - ملف:
    - `image` (صورة): ملف (اختياري).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم إنشاء التدريب بنجاح" مع معرف التدريب.
  - فشل: خطأ (مثل "الشركة غير موجودة").
- **ملاحظات**: يتحقق من وجود الشركة.

#### **PUT /internships/:id**
- **الغرض**: تحديث تدريب داخلي.
- **البيانات المطلوبة**:
  - `:id` (معرف التدريب): رقم.
  - `company_id`, `title`, `description`, `type`, `mode`, `duration`, `location`, `start_date`, `end_date`: نصوص (مطلوبة).
  - `category_id`: رقم (مطلوب).
  - ملف:
    - `image` (صورة): ملف (اختياري).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم تحديث التدريب بنجاح".
  - فشل: خطأ (مثل "التدريب غير موجود").
- **ملاحظات**: يحتفظ بالصورة القديمة إذا لم يتم تقديم جديد.

#### **DELETE /internships/:id**
- **الغرض**: حذف تدريب داخلي.
- **البيانات المطلوبة**:
  - `:id` (معرف التدريب): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم حذف التدريب بنجاح".
  - فشل: خطأ (مثل "التدريب غير موجود").
- **ملاحظات**: يتحقق من وجود التدريب.

---

### 8. **إدارة البرامج التدريبية**
#### **GET /training_programs**
- **الغرض**: استرجاع قائمة البرامج التدريبية.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة البرامج.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يسترجع البيانات من جدول `training_programs`.

#### **GET /training_programs/:id**
- **الغرض**: استرجاع تفاصيل برنامج تدريبي.
- **البيانات المطلوبة**:
  - `:id` (معرف البرنامج): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: بيانات البرنامج.
  - فشل: خطأ (مثل "البرنامج غير موجود").
- **ملاحظات**: يتحقق من وجود البرنامج.

#### **POST /training_programs**
- **الغرض**: إنشاء برنامج تدريبي جديد.
- **البيانات المطلوبة**:
  - `center_id` (معرف المركز): رقم.
  - `title`, `description`, `type`, `mode`, `duration`, `location`, `start_date`, `end_date`: نصوص (مطلوبة).
  - `category_id`: رقم (مطلوب).
  - ملف:
    - `image` (صورة): ملف (اختياري).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم إنشاء البرنامج بنجاح" مع معرف البرنامج.
  - فشل: خطأ (مثل "المركز غير موجود").
- **ملاحظات**: يتحقق من وجود المركز.

#### **PUT /training_programs/:id**
- **الغرض**: تحديث برنامج تدريبي.
- **البيانات المطلوبة**:
  - `:id` (معرف البرنامج): رقم.
  - `center_id`, `title`, `description`, `type`, `mode`, `duration`, `location`, `start_date`, `end_date`: نصوص (مطلوبة).
  - `category_id`: رقم (مطلوب).
  - ملف:
    - `image` (صورة): ملف (اختياري).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم تحديث البرنامج بنجاح".
  - فشل: خطأ (مثل "البرنامج غير موجود").
- **ملاحظات**: يحتفظ بالصورة القديمة إذا لم يتم تقديم جديد.

#### **DELETE /training_programs/:id**
- **الغرض**: حذف برنامج تدريبي.
- **البيانات المطلوبة**:
  - `:id` (معرف البرنامج): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم حذف البرنامج بنجاح".
  - فشل: خطأ (مثل "البرنامج غير موجود").
- **ملاحظات**: يتحقق من وجود البرنامج.

#### **GET /training_programs/:id/trainers**
- **الغرض**: استرجاع المدربين المرتبطين ببرنامج تدريبي.
- **البيانات المطلوبة**:
  - `:id` (معرف البرنامج): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة المدربين.
  - فشل: خطأ (مثل "البرنامج غير موجود").
- **ملاحظات**: يستخدم جدول `program_trainers` للربط.

#### **POST /training_programs/:id/trainers**
- **الغرض**: ربط مدرب ببرنامج تدريبي.
- **البيانات المطلوبة**:
  - `:id` (معرف البرنامج): رقم.
  - `trainer_id` (معرف المدرب): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم ربط المدرب بنجاح".
  - فشل: خطأ (مثل "المدرب موجود مسبقًا").
- **ملاحظات**: يتحقق من عدم وجود الربط مسبقًا.

#### **DELETE /training_programs/:id/trainers/:trainerId**
- **الغرض**: إزالة مدرب من برنامج تدريبي.
- **البيانات المطلوبة**:
  - `:id` (معرف البرنامج): رقم.
  - `:trainerId` (معرف المدرب): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم إزالة المدرب بنجاح".
  - فشل: خطأ (مثل "المدرب غير مرتبط").
- **ملاحظات**: يتحقق من وجود الربط.

---

### 9. **إدارة طلبات التدريب الداخلي**
#### **GET /internship_applications**
- **الغرض**: استرجاع قائمة طلبات التدريب الداخلي.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة الطلبات.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يسترجع البيانات من جدول `internship_applications`.

#### **GET /internship_applications/:id**
- **الغرض**: استرجاع تفاصيل طلب تدريب داخلي.
- **البيانات المطلوبة**:
  - `:id` (معرف الطلب): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: بيانات الطلب.
  - فشل: خطأ (مثل "الطلب غير موجود").
- **ملاحظات**: يتحقق من وجود الطلب.

#### **POST /internship_applications**
- **الغرض**: إنشاء طلب تدريب داخلي جديد.
- **البيانات المطلوبة**:
  - `internship_id` (معرف التدريب): رقم.
  - `education_level` (مستوى التعليم): نص.
  - `status` (الحالة): نص (اختياري، افتراضي: `pending`).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم إنشاء الطلب بنجاح" مع معرف الطلب.
  - فشل: خطأ (مثل "المستخدم قدم طلبًا مسبقًا").
- **ملاحظات**: يتحقق من عدم تقديم طلب سابق.

#### **PUT /internship_applications/:id**
- **الغرض**: تحديث طلب تدريب داخلي.
- **البيانات المطلوبة**:
  - `:id` (معرف الطلب): رقم.
  - `education_level` (مستوى التعليم): نص.
  - `status` (الحالة): نص.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم تحديث الطلب بنجاح".
  - فشل: خطأ (مثل "الطلب غير موجود").
- **ملاحظات**: يمكن تقييد التحديث لصاحب الطلب أو المسؤول.

#### **DELETE /internship_applications/:id**
- **الغرض**: حذف طلب تدريب داخلي.
- **البيانات المطلوبة**:
  - `:id` (معرف الطلب): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم حذف الطلب بنجاح".
  - فشل: خطأ (مثل "الطلب غير موجود").
- **ملاحظات**: يمكن تقييد الحذف لصاحب الطلب أو المسؤول.

---

### 10. **إدارة طلبات البرامج التدريبية**
#### **GET /program_applications**
- **الغرض**: استرجاع قائمة طلبات البرامج التدريبية.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة الطلبات.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يسترجع البيانات من جدول `program_applications`.

#### **GET /program_applications/:id**
- **الغرض**: استرجاع تفاصيل طلب برنامج تدريبي.
- **البيانات المطلوبة**:
  - `:id` (معرف الطلب): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: بيانات الطلب.
  - فشل: خطأ (مثل "الطلب غير موجود").
- **ملاحظات**: يتحقق من وجود الطلب.

#### **POST /program_applications**
- **الغرض**: إنشاء طلب برنامج تدريبي جديد.
- **البيانات المطلوبة**:
  - `training_program_id` (معرف البرنامج): رقم.
  - `education_level` (مستوى التعليم): نص.
  - `status` (الحالة): نص (اختياري، افتراضي: `pending`).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم إنشاء الطلب بنجاح" مع معرف الطلب.
  - فشل: خطأ (مثل "المستخدم قدم طلبًا مسبقًا").
- **ملاحظات**: يتحقق من عدم تقديم طلب سابق.

#### **PUT /program_applications/:id**
- **الغرض**: تحديث طلب برنامج تدريبي.
- **البيانات المطلوبة**:
  - `:id` (معرف الطلب): رقم.
  - `education_level` (مستوى التعليم): نص.
  - `status` (الحالة): نص.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم تحديث الطلب بنجاح".
  - فشل: خطأ (مثل "الطلب غير موجود").
- **ملاحظات**: يمكن تقييد التحديث لصاحب الطلب أو المسؤول.

#### **DELETE /program_applications/:id**
- **الغرض**: حذف طلب برنامج تدريبي.
- **البيانات المطلوبة**:
  - `:id` (معرف الطلب): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم حذف الطلب بنجاح".
  - فشل: خطأ (مثل "الطلب غير موجود").
- **ملاحظات**: يمكن تقييد الحذف لصاحب الطلب أو المسؤول.

---

### 11. **إدارة الاهتمامات**
#### **GET /interests**
- **الغرض**: استرجاع قائمة الاهتمامات.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة الاهتمامات.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يسترجع البيانات من جدول `interests`.

#### **POST /interests**
- **الغرض**: إنشاء اهتمام جديد.
- **البيانات المطلوبة**:
  - `name` (اسم الاهتمام): نص.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم إنشاء الاهتمام بنجاح" مع معرف الاهتمام.
  - فشل: خطأ (مثل "الاسم موجود مسبقًا").
- **ملاحظات**: يتحقق من عدم وجود الاسم مسبقًا.

#### **PUT /interests/:id**
- **الغرض**: تحديث اهتمام.
- **البيانات المطلوبة**:
  - `:id` (معرف الاهتمام): رقم.
  - `name` (اسم الاهتمام): نص.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم تحديث الاهتمام بنجاح".
  - فشل: خطأ (مثل "الاسم موجود مسبقًا").
- **ملاحظات**: يتحقق من عدم استخدام الاسم من اهتمام آخر.

#### **DELETE /interests/:id**
- **الغرض**: حذف اهتمام.
- **البيانات المطلوبة**:
  - `:id` (معرف الاهتمام): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم حذف الاهتمام بنجاح".
  - فشل: خطأ (مثل "الاهتمام مرتبط بمستخدمين").
- **ملاحظات**: يمنع الحذف إذا كان الاهتمام مرتبطًا بمستخدمين.

---

### 12. **إدارة الإشعارات**
#### **GET /notifications**
- **الغرض**: استرجاع قائمة الإشعارات.
- **البيانات المطلوبة**:
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: قائمة الإشعارات.
  - فشل: خطأ (مثل "خطأ في الخادم").
- **ملاحظات**: يسترجع البيانات من جدول `notifications`.

#### **GET /notifications/:id**
- **الغرض**: استرجاع تفاصيل إشعار.
- **البيانات المطلوبة**:
  - `:id` (معرف الإشعار): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: بيانات الإشعار.
  - فشل: خطأ (مثل "الإشعار غير موجود").
- **ملاحظات**: يمكن تقييد الوصول لصاحب الإشعار أو المسؤول.

#### **POST /notifications**
- **الغرض**: إنشاء إشعار جديد.
- **البيانات المطلوبة**:
  - `user_id` (معرف المستخدم): رقم.
  - `content` (محتوى الإشعار): نص.
  - `is_read` (تم القراءة): نص (`true` أو `false`، اختياري).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم إنشاء الإشعار بنجاح" مع معرف الإشعار.
  - فشل: خطأ (مثل "المستخدم غير موجود").
- **ملاحظات**: يتحقق من وجود المستخدم.

#### **PUT /notifications/:id**
- **الغرض**: تحديث إشعار.
- **البيانات المطلوبة**:
  - `:id` (معرف الإشعار): رقم.
  - `user_id` (معرف المستخدم): رقم.
  - `content` (محتوى الإشعار): نص.
  - `is_read` (تم القراءة): نص (`true` أو `false`).
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم تحديث الإشعار بنجاح".
  - فشل: خطأ (مثل "الإشعار غير موجود").
- **ملاحظات**: يتحقق من وجود الإشعار والمستخدم.

#### **DELETE /notifications/:id**
- **الغرض**: حذف إشعار.
- **البيانات المطلوبة**:
  - `:id` (معرف الإشعار): رقم.
  - رأس `Authorization`: رمز JWT.
- **الاستجابة**:
  - ناجحة: رسالة "تم حذف الإشعار بنجاح".
  - فشل: خطأ (مثل "الإشعار غير موجود").
- **ملاحظات**: يتحقق من وجود الإشعار.

---

## ملاحظات عامة
- **الأمان**:
  - يتم استخدام JWT للتحقق من الهوية في معظم النقاط النهائية.
  - كلمات المرور مشفرة باستخدام `bcrypt`.
  - يحتاج النظام إلى تطبيق التحقق من الأدوار (مثل المسؤول) للنقاط الحساسة.
- **تحسينات مقترحة**:
  - إضافة التحقق من صيغة البيانات (مثل البريد الإلكتروني، الهاتف).
  - تقسيم الكود إلى وحدات منفصلة لتحسين الصيانة.
  - إصلاح الأخطاء مثل تهجئة `passsword` في جدول `trainers`.
  - إضافة آلية للتحقق من الرموز المدرجة في القائمة السوداء عند تسجيل الخروج.
- **الأداء**:
  - استخدام فهارس على الحقول المستخدمة بشكل متكرر في الاستعلامات (مثل `email`).
  - تقليل الاستعلامات المتكررة عن طريق التخزين المؤقت.

---

## الخاتمة
مشروع **Tamkeen** هو نظام متكامل يوفر واجهة برمجة تطبيقات قوية لإدارة بيانات التدريب والمستخدمين. النقاط النهائية تغطي جميع الجوانب من تسجيل الدخول إلى إدارة البرامج والطلبات. مع بعض التحسينات في الأمان، الأداء، وتنظيم الكود، يمكن أن يكون هذا النظام أكثر كفاءة وقابلية للتوسع. يُنصح بمراجعة الأخطاء الحالية (مثل تهجئة `passsword`) وإضافة ميزات إضافية مثل التحقق من الأدوار والتخزين السحابي للملفات.